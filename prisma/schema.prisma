generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// onDelete: Cascade, onUpdate: Cascade

model Plan {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String? @db.Text()

  planPriceList    PlanPrice[]
  subscriptionList Subscription[]

  minimumOfRestaurant Int     @map("minimum_of_restaurant")
  minimumOfProduct    Int     @map("minimum_of_product")
  monthlyPrice        Float   @map("monthly_price") // @default(29.99)
  priceOfRestaurant   Float   @map("price_of_restaurant") //@default(69.99)
  priceOfProduct      Float   @map("price_of_product") // @default(0.99) 
  freePlan            Boolean @default(false) @map("free_plan")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("plan")
}

model PlanPrice {
  id Int @id @default(autoincrement())

  plan   Plan @relation(fields: [planId], references: [id])
  planId Int  @map("plan_id")

  period   PlanPricePeriod
  discount Float

  @@map("plan_price")
}

enum PlanPricePeriod {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

model Subscription {
  id Int @id @default(autoincrement())

  company Company?

  plan   Plan @relation(fields: [planId], references: [id])
  planId Int  @map("plan_id")

  price           Decimal
  restaurantLimit Int     @map("restaurant_limit")
  productLimit    Int     @map("product_limit")

  expiresAt    DateTime @map("expires_at") @db.Timestamptz()
  contactAdmin Boolean  @default(false) @map("contact_admin")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("subscription")
}

model Client {
  id       Int     @id @default(autoincrement())
  email    String  @db.VarChar(150)
  name     String? @db.VarChar(100)
  phone    String? @db.VarChar(15)
  password String

  orderList Order[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("client")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @db.VarChar(150)
  name     String? @db.VarChar(100)
  phone    String? @db.VarChar(15)
  password String

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @unique @map("role_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("user")
}

model Role {
  id Int @id @default(autoincrement())

  roleType           RoleType         @map("role_type")
  roleRestaurantList RoleRestaurant[]

  user User?

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int     @map("company_id")

  @@map("role")
}

enum RoleType {
  ADMIN
  COMPANY_EDIT
  COMPANY_VIEW
  EMPLOYEE_EDIT
  EMPLOYEE_VIEW
}

model RoleRestaurant {
  id Int @id @default(autoincrement())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  restaurantId Int @map("restaurant_id")
  roleId       Int @map("role_id")

  @@map("role_restaurant")
}

model Restaurant {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(150)
  address     String  @db.VarChar(255)
  phone       String  @db.VarChar(25)
  description String? @db.Text()
  logoUrl     String? @map("logo_url") @db.Text()

  roleRestaurantList RoleRestaurant[]
  styleList          Style[]
  paymentMethodList  PaymentMethod[]
  openingHourList    OpeningHour[]
  productList        Product[]
  tableList          Table[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int     @map("company_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("restaurant")
}

model OpeningHour {
  id Int @id @default(autoincrement())

  dayOfWeek   DayOfWeek @map("day_of_week")
  openingTime DateTime  @map("opening_time") @db.Timetz()
  closingTime DateTime  @map("closing_time") @db.Timetz()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  @@map("Opening_hour")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model PaymentMethod {
  id          Int     @id @default(autoincrement())
  title       String  @db.VarChar(100)
  description String  @db.Text()
  logoUrl     String? @map("logo_url") @db.Text()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  @@map("payment_method")
}

model Style {
  id Int @id @default(autoincrement())

  active Boolean @default(false)
  color  Color   @relation(fields: [colorId], references: [id])

  colorId Int @map("color_id")

  company    Company    @relation(fields: [companyId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  companyId    Int @map("company_id")
  restaurantId Int @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("style")
}

model Color {
  id Int @id @default(autoincrement())

  primary       String @db.VarChar(7)
  textPrimary   String @map("text_primary") @db.VarChar(7)
  secondary     String @db.VarChar(7)
  textSecondary String @map("text_secondary") @db.VarChar(7)
  background    String @db.VarChar(7)
  text          String @db.VarChar(7)

  styleList Style[]

  @@map("color")
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text()

  restaurantList Restaurant[]
  roleList       Role[]
  styleList      Style[]

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId Int          @unique @map("subscription_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("company")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String? @db.Text()

  productCategoryList ProductCategory[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("category")
}

model ProductCategory {
  id Int @id @default(autoincrement())

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  categoryId Int
  productId  Int

  @@map("product_category")
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("product_image")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(150)
  description String? @db.Text()
  price       Decimal

  startSellAt  DateTime  @map("start_sell_at") @db.Timestamptz()
  finishSellAt DateTime? @map("finish_sell_at") @db.Timestamptz()

  discount         Float?
  startDiscountAt  DateTime? @map("start_discount_at") @db.Timestamptz()
  finishDiscountAt DateTime? @map("finish_discount_at") @db.Timestamptz()

  productOptionGroupList ProductOptionGroup[]
  productImageList       ProductImage[]
  orderProductList       OrderProduct[]
  productCategoryList    ProductCategory[]
  productOptionItemList  ProductOptionItem[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("product")
}

model ProductOptionGroup {
  id Int @id @default(autoincrement())

  name         String  @db.VarChar(150)
  description  String? @db.Text()
  minSelection Int     @default(1)
  maxSelection Int     @default(1)
  isRequired   Boolean

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  productOptionItemList ProductOptionItem[]

  @@map("product_option_group")
}

model ProductOptionItem {
  id           Int      @id @default(autoincrement())
  name         String?  @db.VarChar(150)
  defaultPrice Decimal?
  maxQuantity  Int      @default(1)

  product            Product            @relation(fields: [productId], references: [id])
  productOptionGroup ProductOptionGroup @relation(fields: [productOptionGroupId], references: [id])

  productId            Int @map("product_id")
  productOptionGroupId Int @map("product_option_group_id")

  @@map("product_option_item")
}

model Table {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(50)
  description String? @db.Text()

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int        @map("restaurant_id")

  orderList Order[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("table")
}

model Order {
  id Int @id @default(autoincrement())

  price       Decimal
  observation String? @db.Text()

  orderProductList OrderProduct[]

  table  Table?  @relation(fields: [tableId], references: [id])
  client Client? @relation(fields: [clientId], references: [id])

  clientId Int? @map("client_id")
  tableId  Int? @map("table_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("order")
}

model OrderProduct {
  id Int @id @default(autoincrement())

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  orderId   Int @map("order_id")
  productId Int @map("product_id")

  quantity Int
  price    Decimal

  @@map("order_product")
}
