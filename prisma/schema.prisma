generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// onDelete: Cascade, onUpdate: Cascade

model Plan {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(50)
  description String? @db.Text()

  planPrice    PlanPrice[]
  subscription Subscription[]

  minimumOfRestaurant Int     @map("minimum_of_restaurant")
  minimumOfMenuItem   Int     @map("minimum_of_menu_item")
  monthlyPrice        Float   @default(29.99) @map("monthly_price")
  priceOfRestaurant   Float   @default(69.99) @map("price_of_restaurant")
  priceOfMenuItem     Float   @default(0.99) @map("price_of_menu_item")
  freePlan            Boolean @default(false)

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("plan")
}

model PlanPrice {
  id String @id @default(uuid())

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @map("plan_id")

  period   PlanPricePeriod
  discount Float

  @@map("plan_price")
}

enum PlanPricePeriod {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

model Subscription {
  id String @id @default(uuid())

  company Company?

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @map("plan_id")

  price           Decimal
  restaurantLimit Int     @map("restaurant_limit")
  menuItemLimit   Int     @map("menu_item_limit")

  expiresAt    DateTime @map("expires_at") @db.Timestamptz()
  contactAdmin Boolean  @default(false) @map("contact_admin")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("subscription")
}

model User {
  id       String  @id @default(uuid())
  email    String  @db.VarChar(150)
  name     String? @db.VarChar(100)
  phone    String? @db.VarChar(15)
  password String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @unique @map("role_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("user")
}

model Role {
  id String @id @default(uuid())

  roleType       RoleType         @map("role_type")
  roleRestaurant RoleRestaurant[]

  user User?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String  @map("company_id")

  @@map("role")
}

enum RoleType {
  ADMIN
  COMPANY_EDIT
  COMPANY_VIEW
  EMPLOYEE_EDIT
  EMPLOYEE_VIEW
}

model RoleRestaurant {
  id String @id @default(uuid())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  restaurantId String @map("restaurant_id")
  roleId       String @map("role_id")

  @@map("role_restaurant")
}

model Restaurant {
  id            String  @id @default(uuid())
  name          String  @db.VarChar(255)
  address       String  @db.VarChar(255)
  phone         String? @db.VarChar(255)
  logoUrl       String? @db.Text()
  openingHour   String  @db.Text()
  paymentMethod String  @db.Text()

  roleRestaurant RoleRestaurant[]
  style          Style[]

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("restaurant")
}

model Style {
  id String @id @default(uuid())

  active Boolean @default(false)
  color  Color   @relation(fields: [colorId], references: [id])

  colorId String @map("color_id")

  company    Company    @relation(fields: [companyId], references: [id])
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])

  companyId    String @map("company_id")
  restaurantId String @map("restaurant_id")

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("style")
}

model Color {
  id String @id @default(uuid())

  primary       String @db.VarChar(7)
  textPrimary   String @map("text_primary") @db.VarChar(7)
  secondary     String @db.VarChar(7)
  textSecondary String @map("text_secondary") @db.VarChar(7)
  background    String @db.VarChar(7)
  text          String @db.VarChar(7)

  style Style[]

  @@map("color")
}

model Company {
  id      String @id @default(uuid())
  name    String @db.VarChar(255)
  address String @db.VarChar(255)
  phone   String @db.VarChar(255)
  logoUrl String @db.Text()

  plan_id  String @db.VarChar(255)
  owner_id String @db.VarChar(255)

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  role  Role[]
  style Style[]

  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String       @unique

  @@map("company")
}

model Category {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("category")
}

model MenuItem {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("menu_item")
}

model MenuItemHistory {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("menu_item_history")
}

model Table {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("table")
}

model Order {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("order")
}

model OrderItem {
  id String @id @default(uuid())

  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  finishedAt DateTime? @map("finished_at") @db.Timestamptz()

  @@map("order_item")
}
